---
title: "07-gea"
format: html
editor: visual
---

### Determining genetic variants associated with environmental gradients with Redundancy analysis (RDA)

### Load required packages

```{r}
library(vegan)
#library(LEA)
library(ggplot2)
library(corrplot)
library(caret)
library(poppr)
library(here)
```

## Import data:

### Temperature data

#### Only Summer

```{r}
anemone_temps <- read.csv(here("project/data", "anemone_temps.csv"))

#summer dataset (for now)
anemone_temps_summer <- anemone_temps %>% filter(season == "Summer")

# oops we don't need Case Inlet
anemone_temps_summer <- anemone_temps_summer %>% filter(site != "CI")

desired_order <- c("GH", "MI", "NR", "CP", "WB", "PG")
anemone_temps_summer$site <- factor(anemone_temps_summer$site, levels = desired_order)

head(anemone_temps_summer)
```

#### All seasons

```{r}
# all data
anemone_temps_wide <- anemone_temps %>%
  pivot_wider(
    id_cols = site,
    names_from = season,
    values_from = c(seasonal_mean, seasonal_90th, seasonal_10th, seasonal_corrected_range, seasonal_avg_gdd))

# Rename columns to have season first
names(anemone_temps_wide) <- gsub("^(.*)_(Fall|Spring|Summer|Winter)$", "\\2_\\1", names(anemone_temps_wide))

# oops we don't need Case Inlet
anemone_temps_wide <- anemone_temps_wide %>% filter(site != "CI")

desired_order <- c("GH", "MI", "NR", "CP", "WB", "PG")
anemone_temps_wide$site <- factor(anemone_temps_wide$site, levels = desired_order)

anemone_temps_all <- anemone_temps_wide

head(anemone_temps_all)
```

#### Scaling for RDA

```{r}
anemone_temps_numeric <- anemone_temps_all %>% select(where(is.numeric)) # selecting temp metrics

anemone_temps_scaled <- scale(anemone_temps_numeric)  # Mean = 0, SD = 1

head(anemone_temps_scaled)
```

### import .gen file of genotypes

Genotypes from 632 individuals at 936 SNPs. No missing data. Data format is a genind object generated by the **adegenet** package.

```{r}
# Read first few lines to inspect format
readLines(here::here("project/output", "genepop_final.gen"), n = 10)

genind_obj <- read.genepop(
  here::here("project/output", "genepop_final.gen"),
  ncode = 2,   # or 3, depending on your allele coding
  quiet = FALSE
)

genind_obj
```

#### Convert to population level allele frequencies (and filter for sites that we have env. data for)

```{r}
pop_factor <- genind_obj$pop  # population assignments
genpop <- genind2genpop(genind_obj, pop = pop_factor)
freq_matrix <- makefreq(genpop, missing = 9, quiet = TRUE)  # 9 for missing data, necessary for LFMM later on

rownames(freq_matrix)  # Shows the population names and their order

sites_to_keep <- c("GraysHarbor_GH50", "MauryIsland_M050", "Nisqually_N050", "CherryPoint_C050", "WillapaBay_W050", "PortGamble_G050")

freq_matrix_filtered <- freq_matrix[rownames(freq_matrix) %in% sites_to_keep, ]

freq_matrix <- freq_matrix_filtered

# Your desired order of population/site names
desired_order <- c("GraysHarbor_GH50", "MauryIsland_M050", "Nisqually_N050", "CherryPoint_C050", "WillapaBay_W050", "PortGamble_G050")

freq_matrix_ordered <- freq_matrix[desired_order, ]

rownames(freq_matrix_ordered) # check
levels(anemone_temps_all$site) #get ready to run the RDA. sanity check. order should match that of frequency matrix
```

### RDA

```{r}
## check for correlation in temperature metrics
corr_mat <- cor(anemone_temps_scaled)
corrplot::corrplot(corr_mat)

IndexesToDrop <- caret::findCorrelation(cor(anemone_temps_scaled), cutoff = 0.7)

#The variables that remain
corrplot(cor(anemone_temps_scaled[,-IndexesToDrop]))

#Save this smaller set
uncorr.temps <- anemone_temps_scaled[,-IndexesToDrop]
```

### PCA of temp metrics that will be used in RDA

```{r}
# Perform PCA
pca_result <- prcomp(uncorr.temps, center = FALSE, scale = FALSE)

# Create a data frame for variable loadings
loadings <- as.data.frame(pca_result$rotation)
loadings$variable <- rownames(loadings)

scores_df <- as.data.frame(pca_result$x) %>%
  bind_cols(anemone_temps_all %>% dplyr::select(site))

loadings_df <- as.data.frame(pca_result$rotation) %>%
  mutate(trait = rownames(.))

site_colors <-c("#4E9DFE","#FECB00","#994BFF","#250F98","#FD9800","#27BF99")

ggplot() +
  # Plot site*depths
  geom_point(data = scores_df, aes(x = PC1, y = PC2, color = site), size = 2, stroke = 1.25) +
  #scale_shape_manual(values = c(21, 16)) +
  scale_color_manual(values = site_colors) + 
  # Plot loadings
  geom_segment(data = loadings_df, 
               aes(x = 0, y = 0, xend = PC1 * 3, yend = PC2 * 3),
               arrow = arrow(length = unit(0.2, "cm")), color = "black") +
  # Add loading labels
  geom_text_repel(data = loadings_df,
                  aes(x = PC1 * 3, y = PC2 * 3, label = trait),
                  color = "black", size = 4) +
  # Add labels and theme
  labs(title = "PCA Biplot",
       x = paste0("PC1 (", round(summary(pca_result)$importance[2,1] * 100, 1), "%)"),
       y = paste0("PC2 (", round(summary(pca_result)$importance[2,2] * 100, 1), "%)")) +
  theme_minimal() +
  coord_fixed() +  # This ensures that one unit on x-axis equals one unit on y-axis
  theme(legend.position = "right")

print(plot)
ggsave("C:/Users/lbreit/Documents/Davidson_data/manuscript_figs/pca_temp.png", plot, width = 10, height = 6, units = "in", bg = "white")
```
#### Variance explained and permutation tests
```{r echo=FALSE, message=FALSE, warning=FALSE}
#variance explained by the axes
summary(eigenvals(pca_result))

#devtools::install_github("arleyc/PCAtest")
#library(PCAtest)
#which PCs are significant, and which variables have significant loadings?
pca_test <- PCAtest(uncorr.temps, nboot = 1000, nperm = 1000)
```

```{r}
rda.dat<-cbind(as.data.frame(uncorr.temps),freq_matrix)
dim(rda.dat) #we have 6 rows for the populations, 3 columns of temp metrics, and 1,872 columns of alleles

#1. Full RDA
rda.full<-vegan::rda(freq_matrix ~ 
                          Summer_seasonal_mean + 
                          Winter_seasonal_90th + 
                          Fall_seasonal_corrected_range, data=as.data.frame(uncorr.temps), scale=T)

#adjust for multiple corrections
RsquareAdj(rda.full)

#variance explained by the canonical (RDA) axes
summary(eigenvals(rda.full, model = "constrained"))

#plot constrained eigenvalues
screeplot(rda.full)

#extract % explained by the first 3 axes
axis.perc <- round(100*(summary(rda.full)$cont$importance[2, 1:2]), 2)

# Check the variance inflation factors to make sure that correlations among predictors are not potentially skewing the results (we want these to be below 10)
vif.cca(rda.full)
```

### Significance testing

```{r}
#anova by terms for each rda
anova.cca(rda.full, permutations = 9999, parallel=20) #global significance = 0.2694
anova.cca(rda.full,permutations = 999, parallel = 12, by="terms") #suggests no temperature metrics are significant
anova.cca(rda.full, permutations=1000, parallel=12, by= "axis") #suggests neither RDA1 nor RDA2 are significant
```

### Identify outlier loci (adaptive candidates)
```{r}
loadings <- scores(rda.full, choices = 1:2, display = "species")
outliers <- which(loadings^2 > quantile(loadings^2, 0.99))  # Top 1% loading scores

cat("Outlier loci (those with top 1% loading scores):", outliers)
```

### Plot RDA results

```{r}
#plot 'em up
sites<-anemone_temps_all$site
bg<-c("#4E9DFE","#FECB00","#994BFF","#250F98","#FD9800","#27BF99")


par(mai=c(1.0,1,0.5,0.5))
plot(rda.full, choices=c(1,2), type="n", scaling=3,cex.axis=1.5, cex.lab=1.5, frame=F,
     xlab=paste0("RDA1 (", axis.perc[1],  "%)"), ylab=paste0("RDA2 (", axis.perc[2], "%)"))
#plot(rda.full,type="n",scaling=3)
points(rda.full,col="gray32",pch=20, cex=2, choices=c(1,2), scaling=3,display="species")
points(rda.full,display="sites",pch=21, cex=3, col="gray32", choices=c(1,2), scaling=3, bg=bg)
text(rda.full,scaling=3, display="bp", col="#0868ac",cex=1, choices=c(1,2))
legend("right",legend=sites, bty="n",col="gray32", pch=21, cex=1.5, pt.bg=bg)
```

### Geographic orientation

![Alt text](~/fish546/lara-zostera/project/images/anemone_sites.png)

### Latent factor mixed modeling

LFMMs are factor regression models with a **genotype frequency matrix** as the response variable, and **environment** or **trait** values as explanatory variables. 
```{r}
getwd()
write.table(freq_matrix, "../output/allele_freq.lfmm", 
            sep = " ", 
            row.names = FALSE, 
            col.names = FALSE, 
            na = "9")  # Replace NA with 9) # Save frequency matrix as .lfmm file
```


#### Assessing population structure - NOT WORKING.

LFMM accounts for population structure by including latent factors to model the unexplained variation in the data. To do so, we must determine how many latent factors to include (essentially how many populations exist). We would assume 6, but let's run the snmf() function, which estimates individual ancestory coefficients.

```{r}
project = NULL
project = snmf("../output/fixed.lfmm", K = 1:10, entropy = TRUE, repetitions = 10, project = "new")
pdf("sNMF.pdf")
plot(project, col = "blue", pch = 19, cex = 1.2)
dev.off()

#library(LEA)
lfmm_model <- lfmm("../output/allele_freq.lfmm", anemone_temps_all, K = 6)  # K = inferred population clusters
pvals <- lfmm_test(lfmm_model, temp_data)
adaptive_snps <- which(p.adjust(pvals$pvalues, method = "fdr") < 0.05)
```

### Pop structure

```{r}
genind_obj <- read.genepop(
  here::here("project/output", "genepop_final.gen"),
  ncode = 2,   # or 3, depending on your allele coding
  quiet = FALSE
)

library(dartRverse)
genlight_obj <- gi2gl(genind_obj) # convert genind obj to genlight

num_clust <- find.clusters(genlight_obj)

```
